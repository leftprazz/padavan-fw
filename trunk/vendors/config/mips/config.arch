.EXPORT_ALL_VARIABLES:
############################################################################
#
#  A Generic mips config.arch that can be included by other platforms
#  to reduce the number of places that need to be edited when something
#  common changes.  If you include this file you may provide:
#
#  CPUFLAGS            - cpu specific flags to pass to the compiler
#  VENDOR_CFLAGS       - vendor specific flags to pass to the compiler
#  LOPT                - library optimisation flags
#  UOPT                - user optimisation flags
#  GLIBC_TARGET_OPTS   - flags needed for gcc
#
#  David McCullough <davidm@snapgear.com>
#
############################################################################

ifeq ($(ROOTDIR)/modules,$(wildcard $(ROOTDIR)/modules))
  EXTRA_MODULE_DIRS = $(ROOTDIR)/modules
endif

ifndef VERSIONPKG
  VERSIONPKG  := 1.0.0
endif

ifndef VERSIONSTR
  VERSIONSTR = Mediatek/$(CONFIG_PRODUCT) Version $(VERSIONPKG)
endif

ifndef RELFILES
  RELFILES = boot/boot.bin boot/boot.elf \
             images/image.bin images/flash.bin \
             $(LINUXDIR)/linux
endif

############################################################################
#
# The makefiles need to know how to do things in different contexts
# To save some pain we put it all here
#
# First settings we always want for all build
#
############################################################################

ENDIAN         = little
HOST_TARGET    = mipsel-linux

MACHINE        = mips
ARCH           = mips
CROSS_COMPILE  = $(CONFIG_CROSS_COMPILER_PATH)/mipsel-linux-uclibc-
CROSS          = $(CROSS_COMPILE)
CONFIGURE_HOST = $(CONFIG_CROSS_COMPILER_PATH)/mipsel-linux-uclibc-

CC             = $(CROSS_COMPILE)gcc
GCC            = $(CROSS_COMPILE)gcc
CXX            = $(CROSS_COMPILE)g++
AS             = $(CROSS_COMPILE)as
AR             = $(CROSS_COMPILE)ar
LD             = $(CROSS_COMPILE)ld
NM             = $(CROSS_COMPILE)nm
OBJCOPY        = $(CROSS_COMPILE)objcopy
RANLIB         = $(CROSS_COMPILE)ranlib
ELF2FLT        = elf2flt
STRIPTOOL      = $(CROSS_COMPILE)strip
STRIP          = $(STRIPTOOL)

GCC_DIR        = $(shell $(CC) -v 2>&1|grep specs|sed -e 's/.* \(.*\)specs/\1\./')
MACH_DIR       = $(shell $(CC) -print-multi-directory)

# have we set a special config below
UCLINUX_BUILD_SET = 0

# Pull in common definitions
include $(ROOTDIR)/vendors/config/common/config.arch
include $(LINUX_CONFIG)

# clear flags
CFLAGS :=

############################ PLATFORM FLAGS #################################################
CPUFLAGS = -mips32r2 -march=mips32r2
ifeq ($(CONFIG_RALINK_MT7621),y)
CPUFLAGS += -mtune=1004kc
else ifneq (,$(filter y,$(CONFIG_RALINK_RT3052) $(CONFIG_RALINK_RT3352) $(CONFIG_RALINK_RT5350) $(CONFIG_RALINK_MT7620) $(CONFIG_RALINK_MT7628)))
CPUFLAGS += -mtune=24kec
else ifeq ($(CONFIG_RALINK_RT3883),y)
CPUFLAGS += -mtune=74kc
else
CPUFLAGS += -mtune=mips32r2
endif
CC += $(CPUFLAGS)
GCC += $(CPUFLAGS)
CXX += $(CPUFLAGS)
AS += $(CPUFLAGS)
VENDOR_CFLAGS =
UOPT = -Os
LOPT = -Os

############################################################################
#
# General purpose lib building rules,  uClibc.config uses these when
# possible
#
############################################################################

ifdef UCLINUX_BUILD_LIB
  ifdef CONFIG_LIB_DEBUG
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-O1) -g
  else
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-Os) -fomit-frame-pointer -fno-stack-protector -femit-struct-debug-baseonly -fno-var-tracking
  endif
	CFLAGS  += -pipe
	CFLAGS  += $(VENDOR_CFLAGS)
	CFLAGS  += -DEMBED
	CFLAGS  += -I$(ROOTDIR)/stage/include
	LDFLAGS += -L$(ROOTDIR)/stage/lib

	# don't want all the CFLAGS for uClibc/Config
	ARCH_CFLAGS = $(CFLAGS)
	CFLAGS  += -Dlinux -D__linux__ -Dunix
	UCLINUX_BUILD_SET=1
endif

############################################################################
#
# Settings for building user apps
#
############################################################################

ifdef UCLINUX_BUILD_USER
  ifdef CONFIG_USER_DEBUG
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-O1) -g
  else
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-Os) -fomit-frame-pointer -fno-stack-protector -femit-struct-debug-baseonly -fno-var-tracking
  endif
	CFLAGS  += -pipe
	CFLAGS  += $(VENDOR_CFLAGS)
	CFLAGS  += -Dlinux -D__linux__ -Dunix -DEMBED
	CFLAGS  += -I$(ROOTDIR)/stage/include
	LDFLAGS += -L$(ROOTDIR)/stage/lib

#	LDLIBS   = $(LIBC) $(LIBGCC) $(CRTN)

	FLTFLAGS :=
	export FLTFLAGS

	# for anyone still using it
	CONVERT = /bin/true

	UCLINUX_BUILD_SET=1
endif

############################################################################
#
# fall through, do other config options perhaps
#
############################################################################

ifeq ($(UCLINUX_BUILD_SET),1)
	EXTRA_CFLAGS := -Dlinux $(CPUFLAGS)
endif

############################################################################
#
# Common warnings
#
############################################################################

CFLAGS += -Wall -Wno-trigraphs -Wno-strict-aliasing -Wno-format-security

# disable unused variable warnings in gcc >= 4.6.x
CFLAGS += $(call check-gcc-nowarn,unused-but-set-variable,)

# disable unused const warning
CFLAGS += $(call check-gcc-nowarn,unused-const-variable,)

# disable format truncation warning
CFLAGS += $(call check-gcc-nowarn,format-truncation,)

# disable format overflow warning
CFLAGS += $(call check-gcc-nowarn,format-overflow,)

# disable misleading indentation warning
CFLAGS += $(call check-gcc-nowarn,misleading-indentation,)

############################################################################
#
# gcc version specific flags
#
############################################################################
# conserve stack if available
CFLAGS += $(call check-gcc-flag,-fconserve-stack,)

# disable invalid "can't wrap" optimizations for signed / pointers
CFLAGS += $(call check-gcc-flag,-fno-strict-overflow,)

# fix gcc-4.9.x miscompilation of some code
CFLAGS += $(call check-gcc-flag,-fno-var-tracking-assignments,)

CFLAGS += $(call check-gcc-flag,-fno-merge-all-constants,)
CFLAGS += $(call check-gcc-flag,-fmerge-constants,)

# Make sure -fstack-check isn't enabled (like gentoo apparently did)
CFLAGS += $(call check-gcc-flag,-fno-stack-check,)

# more safe codegeneration
CFLAGS += $(call check-gcc-flag,-fno-delete-null-pointer-checks,)

############################################################################
#
# C++ flags
#
############################################################################

CXXFLAGS := $(CFLAGS) $(INCCXX) -static-libstdc++
CXXLIBS   = -Wl,-Bstatic $(LIBSTDCPP) -Wl,-Bdynamic $(LIBC) $(LIBGCC) $(CRTN)

############################################################################
#
# C specific flags (not C++)
#
############################################################################

# disable pointer signed/unsigned warnings in gcc >= 4.x
CFLAGS += -Wno-pointer-sign

